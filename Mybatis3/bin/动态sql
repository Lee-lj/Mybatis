SQL片段: 
            java中使用方法来使用相似的代码
            SQL中使用存储过程或者存储函数使用相似的代码    
            Mybatis中使用SQL片段使用相似的代码(将相似的代码提炼出来):
                   1.提取（id就是后面要使用的标识符）
                        <sql id="ObjectArray">
                        <if test="array!=null and array.length>0">
		                   <foreach collection="array" open=" stuNo in (" close=")" item="student" separator=",">
		    	                #{student.stuNo}
		                   </foreach>
	                        </if>
                            </sql>
                   2.使用（使用的时候直接include refid="提取的id"）
	                    <select id="useSQLtip" parameterType="Obejct[]" resultType="thirdclass.Student">
	                       select * from students where
	                    <include refid="ObjectArray"></include>
	                    </select>
	    
	                          如果要跨文件使用SQL片段，则include refid="SQL片段所在的路径"
	                                         include refid="mapper.StudentMapper.ObjectArray"
	    
	    
	    
	    select stuNo "No",stuName "Name" from students 
	    select stuNo "No",stuName "Name" from students where stuNo=#{stuNo}
	    select stuNo "No",stuName "Name" from students where stuNo=#{stuNo} and stuName=#{stuName}
	    
	    动态sql，使用sql标签，避免多次的重复输入:
	    select stuNo "No",stuName "Name" from students作为一个标签，后面可以直接用标签而不用再输入一遍，
	    
	 方法1.    <!-- 带sql标签的动态sql查询 -->
	   	  	 <select id="selectWithSqlTag" resultType="thirdclass.Student" parameterType="thirdclass.Student">
	   	  	 select stuNo from students where
	    	 <!-- 如果只输入一个值，则可以 select stuNo from students where 1=1  表示永远成立-->
	    	 <!-- test中写student中的具体的属性    底下定义了不能为空 -->
	    	 <if test="stuName!=null and stuName!=''">
	    	     stuName=#{stuName}
	    	 </if> 
	    	 <if test="stuAge!=null and stuAge!=''">
	    	     and stuAge=#{stuAge}
	   	 	 </if> 
		 	 </select>
		 	 
	方法2.    使用了where，在逐语句中可以不写where，where会自动处理第一个if中的and（忽略第一个and），只能处理第一个！所以第二个还是要加and
	                                         当第一个输入的值为空时，会跳转到第二个if开始执行（忽略and）
	         
	         <!-- 带sql标签的动态sql查询 -->
	   	  	 <select id="selectWithSqlTag" resultType="thirdclass.Student" parameterType="thirdclass.Student">
	   	  	 select stuNo from students
	   	  	 <where>
	    	 <!-- test中写student中的具体的属性    底下定义了不能为空 -->
	    	 <if test="stuName!=null and stuName!=''">
	    	     stuName=#{stuName}
	    	 </if> 
	    	 <if test="stuAge!=null and stuAge!=''">
	    	     and stuAge=#{stuAge}
	    	 </if> 
		 	 </where>
		 	 </select>    
	    	     
	    	     
	    	     
	    	     
使用<foreach>
<foreach>可以迭代的类型：数组，集合，属性(类的属性:Grade类:List<Integer>   意思是这个类本身就含有数组或者其他)
                                           查询学号为226和222以及322的学生	    
                                           
                            属性方式:  先建立属性属性(类的属性:Grade类:List<Integer>)，然后用这个类来封装226.222.322这三个学号
                                           <select id="selectWithForeach" parameterType="thirdclass.Grade" resultType="thirdclass.Student">
                                           select * from students where
	                                       <if test="stuNos!=null and stuNos.size>0">
	                                            stuNo in (stuNos)
	                                       </if>	这样直接写会无法识别stuNos，所以使用foreach  
	                                      
	                                       <!-- 一次查询多个学生，使用foreach -->
	                                  <select id="selectWithForeach" parameterType="thirdclass.Grade" resultType="thirdclass.Student">
	                                  select * from students where
	                                  <if test="stuNos!=null and stuNos.size>0">
	                                      <!-- collection写在类中定义的集合 ，主体中写要循环执行的集合，open和close定义开始和结束的位置   -->
	                                      <!-- for[String name;[names]] 可以随便起名，item="stuNo"相当于集合stuNos集合的每一个元素-->
	                                      <!-- separator 分隔符     表示数据（222226322）中间用什么分隔符隔开-->
	                                      <!-- select * from students where
	                                                                                                                                 加open: select * from students wherestuNo in (,所以要在open中加一个空格
	                                                                                                                                 加item: select * from students wherestuNo in (222226322
	                                                                                                                                 加close: select * from students wherestuNo in (222226322)
	                                                                                                                                 最终select * from students wherestuNo in (222,226,322)
 	                                       -->
		                                  <foreach collection="stuNos" open=" stuNo in (" close=")" item="stuNo" separator=",">
		                                  	#{stuNo}
		                                  </foreach>
	                                  </if>  
	                                  </select> 
	                                  
	                                  public static void selectWithForeach() throws IOException {
			                          Reader reader = Resources.getResourceAsReader("config.xml");
			                          SqlSessionFactory sessionFactory=new SqlSessionFactoryBuilder().build(reader);
			                          SqlSession session=sessionFactory.openSession();
	                                  StudentMapper studentMapper=session.getMapper(StudentMapper.class);
	                                  Grade grade = new Grade();
	                                  List<Integer> stuNos=new ArrayList<>(); 
                                      stuNos.add(226);
                                      stuNos.add(222);
                                      stuNos.add(322);
                                      grade.setStuNos(stuNos);
	                                  List<Student> students=studentMapper.selectWithForeach(grade);
			                          System.out.println(students);
			                          session.close();} 
	   	 	
		 
		 数组方式:将学号用数组来存放
		                 <!-- 一次查询多个学生，使用foreach 数组方式 int[] Nos={226,222,322} 无论传递什么参数， 数组的话collection，test等xml都用array-->
	                     <select id="selectWithArrayList" parameterType="int[]" resultType="thirdclass.Student">
	                     select * from students where
	                     <if test="array!=null and array.length>0">
	                         <!-- collection写在类中定义的集合 ，主体中写要循环执行的集合，open和close定义开始和结束的位置   -->
	                         <!-- for[String name;[names]] 可以随便起名，item="stuNo"相当于集合stuNos集合的每一个元素-->
	                         <!-- separator 分隔符     表示数据（222226322）中间用什么分隔符隔开-->
	                         <!-- select * from students where
	                                                                                          加open: select * from students wherestuNo in (,所以要在open中加一个空格
	                                                                                          加item: select * from students wherestuNo in (222226322
	                                                                                          加close: select * from students wherestuNo in (222226322)
	                                                                                          最终select * from students wherestuNo in (222,226,322)
 	                          -->
		                     <foreach collection="array" open=" stuNo in (" close=")" item="stuNo" separator=",">
		                     	#{stuNo}
		                     </foreach>
	                      </if>  
	                      </select>	
	                      
	                      public static void selectWithArray() throws IOException {
			              Reader reader = Resources.getResourceAsReader("config.xml");
			              SqlSessionFactory sessionFactory=new SqlSessionFactoryBuilder().build(reader);
			              SqlSession session=sessionFactory.openSession();
	                      StudentMapper studentMapper=session.getMapper(StudentMapper.class);
	                      int[] Nos= {226,222,322};
	                      List<Student> students=studentMapper.selectWithArray(Nos);
			              System.out.println(students);
			              session.close();}
	                      
	            集合方式: 无论传递什么参数， xml文件中都用List来代替
	                      <!-- 一次查询多个学生，使用foreach 集合方式，无论传递什么参数， xml文件中都用List来代替 List<Integer> Nos值是{226,222,322} -->
	                      <select id="selectWithList" parameterType="list" resultType="thirdclass.Student">
	                          select * from students where
	                          <if test="list!=null and list.size>0">
	                       	     <foreach collection="list" open=" stuNo in (" close=")" item="stuNo" separator=",">
	                     	     	 #{stuNo}
	                     	     </foreach>
	                      </if>  
	                      </select>
	                      
	                      
	                      
	                      public static void selectWithList() throws IOException {
			              Reader reader = Resources.getResourceAsReader("config.xml");
			              SqlSessionFactory sessionFactory=new SqlSessionFactoryBuilder().build(reader);
			              SqlSession session=sessionFactory.openSession();
	                      StudentMapper studentMapper=session.getMapper(StudentMapper.class);
	                      List<Integer> Nos= new ArrayList<>();
	                      Nos.add(222);
	                      Nos.add(226);
	                      Nos.add(322);
	                      List<Student> students=studentMapper.selectWithList(Nos);
			              System.out.println(students);
			              session.close();}
	          
	            对象数组方式:   Student[] students={student0,student1,student2}  每个studentxxx包含一个学号属性
	                      <!-- 一次查询多个学生，对象数组方式，将多个元素放入对象数组中，对象数组也是数组，所以也用array 
	                           ||Student[] students=new Student[] {stu0,stu1,stu2}; 对象数组parameterType必须使用Object[]-->
	                      <select id="selectWithTargetList" parameterType="Obejct[]" resultType="thirdclass.Student">
	                          select * from students where
	                          <if test="array!=null and array.length>0">
	                      	    <foreach collection="array" open=" stuNo in (" close=")" item="student" separator=",">
	                      	    	#{student.stuNo}
	                      	    </foreach>
	                      </if>  
	                      </select>
	                      
	                      public static void selectWithTargetList() throws IOException {
			              Reader reader = Resources.getResourceAsReader("config.xml");
			              SqlSessionFactory sessionFactory=new SqlSessionFactoryBuilder().build(reader);
			              SqlSession session=sessionFactory.openSession();
	                      StudentMapper studentMapper=session.getMapper(StudentMapper.class);
	                      Student stu0=new Student();
	                      stu0.setStuNo(222);
	                      Student stu1=new Student();
	                      stu1.setStuNo(222);
	                      Student stu2=new Student();
	                      stu2.setStuNo(222);
	                      Student[] students=new Student[] {stu0,stu1,stu2};
                          studentMapper.selectWithTargetList(students);
	                      System.out.println(students);
			              session.close();}