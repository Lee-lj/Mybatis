查询缓存（查询时才会用到，增删改不涉及）:
                    分为一级缓存和二级缓存
                    1.一级缓存范围:同一个SqlSession对象
                                                                                    第一次查询一个学生，会从数据库（DB）中获取对象，将获取到的对象放入缓存中的SqlSession对象中，
                                                                                    后续如果用同样的SQlsession对象查询此学生，则可以直接从缓存中获取对象，而不用再一次访问数据库，这就是一级缓存
                                                                                    但是在增删改方法使用后的commit()时会将缓存中的所有对象清空
                                                                                    
                                          Mybatis默认开启一级缓存
                                          
                    2.二级缓存(存放在硬盘中)
                    二级缓存的使用:
                                               注意:如果两个mapper.xml的namespace相同，那麽他们产生的对象还是共享二级缓存
                                               触发将对象写入二级缓存的时机 :session.close();，关闭时缓存
                          
                                                                                 二级缓存分为Mybatis自带的二级缓存和第三方提供的二级缓存            
                              
                             1. Mybatis自带的二级缓存范围:
                                                                                          同一个namespace生成的mapper对象（例如StuentMapper.xml就是一个namespace，其中的对象都使用同一个缓存）
                              namespace的值就是接口的全类名(包名.类名)      通过接口可以产生代理对象(^studentMapper对象)  
                              StudentMapper studentMapper=session.getMapper(StudentMapper.class);
                              StudentMapper studentMapper2=session.getMapper(StudentMapper.class)
                              (StudentMapper.class)就是接口（namespace）
                                                                                           这里的studentMapper和studentMapper2来自同一个namespace，共享二级缓存sqlSession    
                                                                                           
                                                 Mybatis默认没有开启二级缓存，需要手工打开,二级缓存是将数据从内存放入硬盘中(序列化),反序列化就是从硬盘放入内存
                                                         1.在config.xml中:
                                                                  <settings>
	                                                              <!-- 开启二级缓存 -->
	                                                              <setting name="cacheEnabled" value="true"/>
	                                                              </settings>    
	                                                     2.在具体的mapper.xml中声明开启（StudentMapper.xml）:
	                                                     <!-- 声明此namespacce开启二级缓存 -->
                                                         <cache/>
                                                         
                                                         
                                                         准备缓存的对象必须实现序列化接口。否则会报NotSerializbleException的错误。
                                                         通过namespace="mapper.StudentMapper"，可知序列化对象为Student,所以需要将Student序列化 。
                                                         只需在student类中实现Serializble接口，就可序列化，但是Student类的本类，父类以及其中包含的级联属性(studentCard)也需要序列化
                   session.close();，关闭时缓存
        
        
                                    public static void selectStudentOne() throws IOException {
	                            	Reader reader = Resources.getResourceAsReader("config.xml");
		                            SqlSessionFactory sessionFactory=new SqlSessionFactoryBuilder().build(reader);
		                            SqlSession session=sessionFactory.openSession();
	                            	//		String statement="thirdclass.PersonMapper.insertStudent";//statement注明要执行的sql ,用下面的StudentMapper来代替statement
		                            StudentMapper studentMapper=session.getMapper(StudentMapper.class);
	                            	Student student=studentMapper.selectByNo(226);//接口中的方法
		                            System.out.println(student.getStuNo());	
		
		                            //查询第二次验证二级缓存
		                            SqlSession session1=sessionFactory.openSession();
		                            StudentMapper studentMapper1=session1.getMapper(StudentMapper.class);
		                            Student student1=studentMapper.selectByNo(226);
		                            System.out.println(student1.getStuNo());	
		                            session.close();
	                            	session1.close();
	                            }
	                        
	    二级缓存的禁用:只需要在要关闭二级缓存的sql的配置栏中加入useCache="false"  ，默认为true，true就是开启二级缓存
	               <select id="useSQLtip" parameterType="Object[]" resultType="thirdclass.Student" useCache="false">
	                 select * from students where
	                 <include refid="ObjectArray"></include>
	               </select>      
	 Cache Hit Ratio [mapper.StudentMapper]: 0.0这是命中率，第一次查询还是用到了数据库，但是二级缓存中并没有此数据，所以命中率为0，如果第二次查，缓存中有，那么命中率就是1:2,命中率就是在二级缓存中查找到的次数除以查找的总次数  
	 
	  二级缓存的清理:
	           1.与一级缓存一样，只要commit();就会清理缓存，这样设计的原因是为了防止脏数据的产生
	           commit();会清理一级和二级的缓存，但是清理二级缓存时不能使用查询自身的commit();这样不会清理缓存，只有增删改的commit()会清理缓存 
	           
	           2.只需要在要清理二级缓存的sql的配置栏中加入 flushCache="ture"，这是自动清理缓存，默认值是flushCache="false"，不清理缓存
	           <select id="useSQLtip" parameterType="Object[]" resultType="thirdclass.Student" flushCache="ture">
	                 select * from students where
	                 <include refid="ObjectArray"></include>
	               </select>
	           
	                    2.第三方提供的二级缓存:ehcache,memcache(这两个第三方厂商在内部已经实现过了Cache接口)
	                                                                 要想整合第三方提供的二级缓存(或者自定义缓存)，必须实现Cache接口，默认实现类是PerpetualCache
	                                                                 
	                                                                                 例:整合ehcache二级缓存:
	                                   1.需要的JAR:Ehcache-core.jar,mybatis-Ehcache.jar,slf4j-api.jar
	                                   2.编写ehcache配置文件 Ehcache.xml:
	                                             
	                                           <ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../config/ehcache.xsd">
                                               <!--当二级缓存的对象 超过内存限制时（缓存对象的个数>maxElementsInMemory），存放入的硬盘文件  -->
                                               <diskStore path="D:\Ehcache"/>
                                               <!-- 
                                               	maxElementsInMemory:设置 在内存中缓存 对象的个数
                                                  maxElementsOnDisk：设置 在硬盘中缓存 对象的个数
                                                  eternal：设置缓存是否 永远不过期
                                                  overflowToDisk：当内存中缓存的对象个数 超过maxElementsInMemory的时候，是否转移到硬盘中
                                                  timeToIdleSeconds：当2次访问 超过该值的时候，将缓存对象失效 
                                                  timeToLiveSeconds：一个缓存对象 最多存放的时间（生命周期）
                                                  diskExpiryThreadIntervalSeconds：设置每隔多长时间，通过一个线程来清理硬盘中的缓存
                                                  memoryStoreEvictionPolicy：当超过缓存对象的最大值时，处理的策略；LRU，FIFO,LFU
                                                -->		     
 
                                               <defaultCache
                                                maxElementsInMemory="1000"
                                                maxElementsOnDisk="1000000"
                                                eternal="false"
                                                overflowToDisk="false"
                                                timeToIdleSeconds="100"
                                                timeToLiveSeconds="100"
                                                diskExpiryThreadIntervalSeconds="120"
                                                memoryStoreEvictionPolicy="LRU">
                                               </defaultCache>
                                              </ehcache>
                                         3.开启Ehcache二级缓存:在主mapper.xml文件中关闭Mybatis自带的二级缓存  :
                                                     <!-- 开启第三方的二级缓存，ctrl+shift+T找到EhcacheCache ，然后找到其路径 org.mybatis.caches.ehcache.EhcacheCache-->
                                                     <cache type=" org.mybatis.caches.ehcache.EhcacheCache">
                                                            <!-- 在这里面配置属性，覆盖 Ehcache.xml中配置的属性，不写的话默认使用 Ehcache.xml中的属性-->
                                                            <!--<property name="maxElementsInMemory" value="2000"/>-->
                                                     </cache>         
	           
	           
	           
	           
	                                                                                   