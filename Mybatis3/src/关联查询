关联查询:
Mysql中添加外键:alter table 表名 add constraint FK_ID（标识符） foreign key(你的外键字段名) REFERENCES 外表表名(对应的表的主键字段名);
                                     外键关联的两列的数据类型必须一致。alter table 表名  modify column 列名    要更改的数据类型;更改某一列的类型
                                     查看某个表的列的数据类型:show columns from 表名;

                 一对一查询
                 一对多查询
                 多对一查询
                 多对多查询
        Mybatis认为只有两种:一对一和一对多（多对一相当于一对多，多对多又相当于多个一对多的变化）
                              一对一:    
              1.使用业务扩展类实现一对一  (核心就是新建一个业务类，包含需要的表的属性，返回类型就是这个业务类)
                  sql中两张表，一张是学生表(students)，包含学生学号，姓名，还有学生证（学生证作为外键 ）(stuNo.stuName,cardid(外键))
                                                      另一张是学生证表(studentCard)包含学生证的编号cardId，包含的信息cardInfo（持卡人的信息）
                                                             在mapper中resultType应该是student类+card类，所以要新建一个类，但是java不支持多继承
                                                             新建的类就是业务扩展类，这个类（StudentWithCard）包含了使用到的n张表的属性
                                                             （在这里继承了Student，写了StudentCard，此时这个扩展类已经包含了StudentCard，所以StudentCard可以删除）
                           
                            <!--  关联查询  ,sql中要加入两张表-->
	                        <select id="selectConnection" parameterType="int" resultType="thirdclass.StudentWithCard">
	                            select s.*,c.* from students s inner join studentCard c
	                            on s.cardId=c.cardId
	                            where s.stuNo=#{stuNo} 	
	                        </select>
	                        
	                        
                   
              2.resultMap方式实现一对一  (核心是sql中不用外键连接，使用属性成员来连接两个类)
                                                                     将学生证studentCard类作为Student的成员     private StudentCard studentCard;
                               <!-- 利用mybatis提供的resultmap实现一对一关联查询 ,不用新建类，直接接收两个表传回的值-->
                               <select id="selectConnectionWithresultMap" parameterType="int" resultMap="studentcard_map">
	                               select s.*,c.* from students s inner join studentCard c
	                               on s.cardId=c.cardId
	                               where s.stuNo=#{stuNo} 	
	                           </select>	
	                           <!-- type就是接受两个表返回值的类型    学生类就包含了学生信息和学生证信息 -->
	                           <resultMap type="thirdclass.Student" id="studentcard_map">
	                                <!-- 学生的信息      主键用id，其他用result  property是java中的属性，column是sql中的列名 建立联系 -->
	                                <id property="stuNo" column="stuNo"/>
	                                <result property="stuAge" column="stuAge"/>
	                                <result property="stuName" column="stuName"/>
	                                
	                                <!--学生证信息   学生证是对象类型 ,一对一用association，一对多用collection  javaType指定property="cardId"是什么类型的-->
	                                <association property="studentCard" javaType="StudentCard">
	                                     <id property="cardId" column="cardId"/>
	                                     <result property="cardInfo" column="cardInfo"/>
	                                </association>
	                           </resultMap>
             
             
             一对多:
             studentClass表（学生班级    classId，className），student表（stuNo，stuName，classId），通过外键联系，	可以形成一对多的关系
              sql中的表   student  studentClass（通过外键classId关联）
              java中的类 student  studentClass
                                           在studentClass类中               List<Student> student;      //增加学生属性    通过该字段建立student类和studentClass的关联
              
                           <!-- 一对多关联查询 -->
	                       <select id="selectOneToMany" parameterType="int" resultMap="OneToMany">
	                           <!-- 查询111班的所有学生 -->
	                           select c.*,s.* from students s inner join studentClass c
	                           on s.classId = C.classId
	                           where c.classId = #{classId}
	                       </select>
	                       <!-- Map中存放类和表的对应关系 -->
	                       <resultMap type="thirdclass.StudentClass" id="OneToMany">
	                           <!-- 主类是班级，先配置班级 -->
	                           <id property="classId" column="classId"/>
	                           <result property="className" column="className"/>
	                           <!-- 配置成员属性学生    描述属性类型用javaType，描述属性的元素类型用ofType-->
	                               <collection property="students" ofType="thirdClass.Student">
	                                    <id property="stuNo" column="stuNo"/>
	                                    <result property="stuAge" column="stuAge"/>
	                                    <result property="stuName" column="stuName"/>
	                                        <!-- 可以继续配置student中的card类 -->
	                               </collection>
	                       </resultMap>
                                                                        
                                                                        测试类
                           public static void selectOneToMany() throws IOException {
			               Reader reader = Resources.getResourceAsReader("config.xml");
			               SqlSessionFactory sessionFactory=new SqlSessionFactoryBuilder().build(reader);
			               SqlSession session=sessionFactory.openSession();
	                       StudentMapper studentMapper=session.getMapper(StudentMapper.class);
	                       //班级   对象类型是StudentClass
                           StudentClass studentClass=studentMapper.selectOneToMany(1);
	                       System.out.println(studentClass.getClassId()+";"+studentClass.getClassName());
			               //对应的student集合
	                       List<Student> students=studentClass.getStudents();
	                           for(Student student:students) {
	                           	System.out.println(student.getStuNo()+";"+student.getStuName()+";"+student.getStuAge());
	                           }
	                       session.close();}
              
              
              
              
              
              
              
              
              
              
              
